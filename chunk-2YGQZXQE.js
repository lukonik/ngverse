import{a as y}from"./chunk-XJUG4WTE.js";import{a as p}from"./chunk-65YWVJ3W.js";import{b as u,c as g}from"./chunk-5SVHC6KN.js";import"./chunk-5SY4JRTO.js";import"./chunk-AC2A7OJH.js";import{Gb as a,Ha as m,Ob as i,Pb as t,Qb as n,eb as o,fa as c,gc as e,ub as d}from"./chunk-4E37DFQL.js";import"./chunk-HZ6M6AS2.js";var S=class r{globalsCode=m("");fileService=c(u);ngOnInit(){this.fileService.getFile("ngverse/ngverse.css").subscribe(l=>{this.globalsCode.set(l)})}static \u0275fac=function(s){return new(s||r)};static \u0275cmp=d({type:r,selectors:[["doc-theming-page"]],decls:50,vars:7,consts:[["label","Theming"],[3,"code"],["language","css",3,"code"]],template:function(s,h){s&1&&(i(0,"doc-blog-page",0)(1,"p"),n(2,"doc-project-name",1),e(3," relies on "),i(4,"code"),e(5,"Tailwind CSS"),t(),e(6," as its styling framework, meaning all components are styled using Tailwind utility classes and CSS variables. With "),i(7,"code"),e(8,"Tailwind CSS v4"),t(),e(9,", the "),n(10,"doc-project-name",1),e(11," library has fully transitioned to native CSS, moving away from preprocessors like SASS or LESS. As a result, all "),n(12,"doc-project-name",1),e(13," components are built using pure CSS instead of SASS. However, thanks to Tailwind CSS, features such as nesting and other enhancements previously available in preprocessors are now natively supported "),t(),i(14,"p"),n(15,"doc-project-name",1),e(16," comes with a predefined Tailwind CSS theme configuration to maintain a consistent design across all components. Most of the theme settings are color variables used throughout the components. This setup ensures that if you want to change the primary color, you can do so in a single place, and it will automatically apply to all components. "),t(),i(17,"p"),e(18," For example, by default, the primary color is: "),i(19,"code"),e(20,"--color-blue-500 "),t(),e(21," If you want to change it to amber, simply update it to: "),i(22,"code"),e(23,"--color-amber-500"),t(),e(24," This makes customization easy and ensures design consistency across your project. "),t(),i(25,"h2"),n(26,"doc-project-name"),e(27," styles"),t(),n(28,"doc-source-code",2),i(29,"h3"),e(30,"CSS Variables"),t(),i(31,"p"),e(32,"CSS Variables follow the following pattern:"),t(),i(33,"ul")(34,"li")(35,"code"),e(36,"--color-name"),t(),e(37,": Background color"),t(),i(38,"li")(39,"code"),e(40,"--color-name-foreground"),t(),e(41,": Text color"),t()(),i(42,"h3"),e(43,"Customizing Component Styles"),t(),i(44,"p"),e(45," While "),n(46,"doc-project-name",1),e(47," provides a default styling system, you are not restricted to using it as-is. You have full flexibility to customize component styles inside their respective styling files based on your project\u2019s needs. How you choose to style the components is entirely up to you\u2014whether by extending Tailwind classes, adding custom styles, or overriding existing ones. "),n(48,"doc-project-name",1),e(49," is designed to be adaptable, allowing you to create a unique design while maintaining consistency. "),t()()),s&2&&(o(2),a("code",!0),o(8),a("code",!0),o(2),a("code",!0),o(3),a("code",!0),o(13),a("code",h.globalsCode()),o(18),a("code",!0),o(2),a("code",!0))},dependencies:[p,g,y],encapsulation:2})};export{S as ThemingPageComponent};
