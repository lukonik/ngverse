import{a as c}from"./chunk-TY5VTMFV.js";import{a as d}from"./chunk-NP46QGYT.js";import{c as m}from"./chunk-IZOCP3TZ.js";import"./chunk-ORXXB4DH.js";import"./chunk-6CWDKGH7.js";import{Fb as s,Nb as n,Ob as t,Pb as o,db as r,fc as e,tb as l}from"./chunk-YNRYOK3S.js";import"./chunk-HZ6M6AS2.js";var u=class a{static \u0275fac=function(i){return new(i||a)};static \u0275cmp=l({type:a,selectors:[["doc-introduction-page"]],decls:62,vars:1,consts:[["label","Introduction"],[3,"code"],["language","bash","code","npm install angular-ui-library"],["language","bash","code","import { ButtonComponent } from 'angular-ui-library'"],["language","bash","code","ng g @ngverse/ui:add button"]],template:function(i,y){i&1&&(n(0,"doc-blog-page",0)(1,"p")(2,"code"),o(3,"doc-project-name"),t(),e(4," is a collection of feature-rich Angular components. It has one key difference from other UI libraries: "),o(5,"br"),n(6,"strong"),e(7,"you don\u2019t install it as a dependency"),t(),e(8,". Instead, you add the source code of the components directly into your project. "),t(),n(9,"h2"),e(10,"What does that mean?"),t(),n(11,"p"),e(12," Typically, when you use a UI library, you install the library as a dependency and then import components from it."),o(13,"br")(14,"doc-project-name",1),e(15," is different. You install the schematics and selectively add the components you need. The component's source code is injected into your project, making it "),n(16,"strong"),e(17,"fully customizable"),t(),e(18,". You can explore, update, or leave it as is. "),t(),n(19,"p"),e(20," For example, if you were using a traditional Angular UI library, the steps would look like this: "),t(),o(21,"doc-source-code",2),n(22,"p"),e(23,"And to use a button component:"),t(),o(24,"doc-source-code",3),n(25,"p"),e(26," In the case of "),n(27,"code"),o(28,"doc-project-name"),t(),e(29,", the process is different, your run: "),t(),o(30,"doc-source-code",4),n(31,"p"),e(32," This command adds the full source code for the button component to your project. It behaves just as if you had created it yourself. "),t(),n(33,"h2"),e(34,"Key Features"),t(),n(35,"ul")(36,"li")(37,"strong"),e(38,"Tailwind:"),t(),e(39," We use Tailwind CSS as a CSS framework"),t(),n(40,"li")(41,"strong"),e(42,"Zoneless:"),t(),e(43," We don't rely on "),n(44,"code"),e(45,"zone.js"),t(),e(46,". All components are zoneless, meaning they will work regardless of whether your app includes "),n(47,"code"),e(48,"zone.js"),t(),e(49," or not. "),t(),n(50,"li")(51,"strong"),e(52,"Fully Customizable:"),t(),e(53," The complete source code is yours, so it is 100% customizable. "),t(),n(54,"li")(55,"strong"),e(56,"Accessibility:"),t(),e(57," We prioritize accessibility, including features like keyboard navigation and focus management. Generated components have these behaviors by default. "),t(),n(58,"li")(59,"strong"),e(60,"Modular Approach:"),t(),e(61," You only add what you need. No unnecessary components or features are bundled into your project. "),t()()()),i&2&&(r(14),s("code",!0))},dependencies:[d,m,c],encapsulation:2})};export{u as IntroductionPageComponent};
